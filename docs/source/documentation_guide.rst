Documentation Guide
=================

.. contents:: Table of Contents
   :local:
   :depth: 2

Overview
-------

VegasAfterglow uses a comprehensive documentation system that combines Doxygen for C++ API documentation and Sphinx for Python API documentation and general documentation. This guide explains how the documentation system is set up, how to build the documentation, and how to contribute to it.

Documentation Structure
---------------------

The documentation is organized as follows:

- **C++ API Documentation**: Generated by Doxygen from comments in the C++ source code
- **Python API Documentation**: Generated by Sphinx from docstrings in the Python code
- **User Guides**: Written in reStructuredText format in the `docs/source` directory
- **Examples**: Code examples with explanations showing how to use the framework

Directory Structure
-----------------

.. code-block:: none

    docs/
    ├── build/                  # Generated documentation files (HTML, PDF)
    ├── doxygen/                # Generated Doxygen XML files
    ├── source/                 # Sphinx documentation source files
    │   ├── _static/            # Static files for Sphinx (CSS, images)
    │   ├── _templates/         # Custom Sphinx templates
    │   ├── api/                # Auto-generated API documentation
    │   ├── index.rst           # Main documentation landing page
    │   ├── installation.rst    # Installation instructions
    │   ├── quickstart.rst      # Getting started guide
    │   ├── python_api.rst      # Python API reference
    │   ├── cpp_api.rst         # C++ API reference
    │   ├── examples.rst        # Usage examples
    │   ├── ...                 # Other documentation pages
    │   └── conf.py             # Sphinx configuration
    ├── Doxyfile                # Doxygen configuration
    ├── Makefile                # Documentation build script
    ├── setup_docs.py           # Helper script for documentation dependencies
    └── README.md               # Information about the documentation system

Build System
----------

The documentation build system uses a Makefile that coordinates both Doxygen and Sphinx:

1. **Doxygen** processes C++ source files and generates XML output
2. **Breathe** (a Sphinx extension) reads the Doxygen XML and integrates it into Sphinx
3. **Sphinx** generates the final HTML documentation

Building the Documentation
------------------------

To build the documentation:

1. Ensure you have all required dependencies installed:

   .. code-block:: bash

       python docs/setup_docs.py

2. Run the build command:

   .. code-block:: bash

       cd docs
       make all

3. View the generated documentation:

   .. code-block:: bash

       # Open docs/build/html/index.html in your browser

The build process will:
- Generate Doxygen XML from C++ comments
- Generate Sphinx HTML from Python docstrings and RST files
- Integrate both into a unified documentation with cross-references

Continuous Integration
--------------------

The documentation is automatically built and deployed to GitHub Pages through a GitHub Actions workflow defined in `.github/workflows/docs.yml`. This ensures that the published documentation is always up-to-date with the main branch.

Documenting C++ Code
------------------

VegasAfterglow uses Doxygen for C++ documentation. Follow these guidelines to ensure consistent documentation:

Class Documentation
^^^^^^^^^^^^^^^^^^^^^^^

Use this format for documenting classes:

.. code-block:: cpp

    /********************************************************************************************************************
     * @class ClassName
     * @brief Brief description of the class (one line)
     * @details Detailed description that provides more information
     *          about what this class does, how it works, and any important details.
     *          This can span multiple lines with proper indentation.
     ********************************************************************************************************************/

Method Documentation
^^^^^^^^^^^^^^^^^^^^^^^

Document class methods using this format:

.. code-block:: cpp

    /********************************************************************************************************************
     * @brief Brief description of the method
     * @param param1 Description of first parameter
     * @param param2 Description of second parameter
     * @return Description of return value
     * @throws Description of exceptions that might be thrown (if applicable)
     * @note Any additional notes (if applicable)
     * @see RelatedClass, related_function() (if applicable)
     ********************************************************************************************************************/

Member Variable Documentation
^^^^^^^^^^^^^^^^^^^^^^^^^^^

For member variables, use inline comments with `///<`:

.. code-block:: cpp

    Real theta_c_{0};   ///< Core angle of the jet in radians
    Real eps_k_{0};     ///< Energy per solid angle at the core
    Real Gamma0_{1};    ///< Initial Lorentz factor at the core

File Documentation
^^^^^^^^^^^^^^^

Each header file should begin with a copyright notice and a file description:

.. code-block:: cpp

    //              __     __                            _      __  _                     _
    //              \ \   / /___   __ _   __ _  ___     / \    / _|| |_  ___  _ __  __ _ | |  ___ __      __
    //               \ \ / // _ \ / _` | / _` |/ __|   / _ \  | |_ | __|/ _ \| '__|/ _` || | / _ \\ \ /\ / /
    //                \ V /|  __/| (_| || (_| |\__ \  / ___ \ |  _|| |_|  __/| |  | (_| || || (_) |\ V  V /
    //                 \_/  \___| \__, | \__,_||___/ /_/   \_\|_|   \__|\___||_|   \__, ||_| \___/  \_/\_/
    //                            |___/                                            |___/
    
    #pragma once
    
    // Include directives
    
    /********************************************************************************************************************
     * @file filename.h
     * @brief Brief description of the file
     * @details Detailed description of the file contents and purpose
     ********************************************************************************************************************/

Namespace Documentation
^^^^^^^^^^^^^^^^^^^^^^^^^

Use this format for documenting namespaces:

.. code-block:: cpp

    /********************************************************************************************************************
     * @namespace namespace_name
     * @brief Brief description of the namespace
     * @details Detailed description of the namespace's purpose and contents
     ********************************************************************************************************************/
    namespace namespace_name {
        // namespace contents
    }

Mathematical Formulas
^^^^^^^^^^^^^^^^^^^^

For mathematical formulas in C++ documentation, use LaTeX notation with the `\f[` and `\f]` tags:

.. code-block:: cpp

    /********************************************************************************************************************
     * @brief Calculate synchrotron frequency
     * 
     * \f[
     * \nu_m = \frac{eB}{2\pi m_e c} \gamma_m^2
     * \f]
     * 
     * where \f$\gamma_m\f$ is the minimum Lorentz factor.
     ********************************************************************************************************************/

Documenting Python Code
---------------------

For Python code, use NumPy-style docstrings:

Class Documentation
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    class ClassName:
        """
        Brief description of the class.

        Detailed description that spans multiple lines and provides
        comprehensive information about the class functionality, usage patterns,
        and important considerations.

        Parameters
        ----------
        param1 : type
            Description of first parameter
        param2 : type
            Description of second parameter

        Attributes
        ----------
        attr1 : type
            Description of first attribute
        attr2 : type
            Description of second attribute

        Examples
        --------
        >>> obj = ClassName(param1=1, param2='value')
        >>> obj.some_method()
        expected result
        """

Method Documentation
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    def method_name(self, param1, param2=None):
        """
        Brief description of the method.

        Detailed multi-line description of what the method does,
        how to use it, and any important considerations.

        Parameters
        ----------
        param1 : type
            Description of first parameter
        param2 : type, optional
            Description of second parameter, default is None

        Returns
        -------
        type
            Description of the return value

        Raises
        ------
        ExceptionType
            Description of when this exception is raised

        Examples
        --------
        >>> obj.method_name(5)
        expected result
        """

Function Documentation
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    def function_name(param1, param2=None):
        """
        Brief description of the function.

        Detailed description of what the function does.

        Parameters
        ----------
        param1 : type
            Description of first parameter
        param2 : type, optional
            Description of second parameter, default is None

        Returns
        -------
        type
            Description of the return value

        Examples
        --------
        >>> function_name(5)
        expected result
        """

Documentation for RST Files
-------------------------

For reStructuredText files in the `docs/source` directory, follow these guidelines:

Section Headers
^^^^^^^^^^^^^

Use consistent section markers:

.. code-block:: rst

    Main Title
    ==========

    Section
    -------

    Subsection
    ^^^^^^^^^

    Subsubsection
    """"""""""""

Code Examples
^^^^^^^^^^^

Include code examples with syntax highlighting:

.. code-block:: rst

    .. code-block:: python

        import numpy as np
        from VegasAfterglow import Model, TophatJet, ISM
        
        # Code example here

Cross-References
^^^^^^^^^^^^^

Link to other documentation sections:

.. code-block:: rst

    See the :doc:`quickstart` guide for more information.
    
    For details on the Python API, see :class:`VegasAfterglow.Model`.

Mathematical Formulas
^^^^^^^^^^^^^^^^^^^^

Use LaTeX for mathematical formulas:

.. code-block:: rst

    .. math::

       \nu_m = \frac{eB}{2\pi m_e c} \gamma_m^2

    The minimum frequency is :math:`\nu_m`.

Tips for Good Documentation
-------------------------

1. **Be Concise**: Keep explanations clear and to the point
2. **Add Examples**: Include usage examples whenever possible
3. **Cross-Reference**: Link to related functions and classes
4. **Explain Parameters**: Clearly document all parameters and return values
5. **Update Documentation**: Keep documentation in sync with code changes
6. **Include Equations**: Add mathematical formulas for physics-based functions
7. **Explain Limitations**: Document any limitations or assumptions
8. **Use Consistent Style**: Follow the established documentation style throughout the codebase
9. **Document Edge Cases**: Explain how the code behaves in unusual situations
10. **Include Units**: Always specify physical units for parameters and return values

Common Mistakes to Avoid
----------------------

1. **Outdated Documentation**: Documentation that doesn't reflect the current code
2. **Missing Parameter Details**: Not documenting all parameters or return values
3. **Vague Descriptions**: Using imprecise language that doesn't clearly explain functionality
4. **No Examples**: Failing to provide usage examples for complex functionality
5. **Inconsistent Style**: Mixing different documentation styles within the same codebase
6. **Ignoring Edge Cases**: Not documenting how functions handle error conditions
7. **Missing Cross-References**: Not linking to related classes or functions
8. **Undocumented Assumptions**: Not stating implicit assumptions about input data or environment
9. **Incorrect References**: Using incorrect class or function names in cross-references
10. **Namespace Confusion**: Using incorrect namespaces in documentation

For more details on contributing to documentation, see the :doc:`contributing` page. 